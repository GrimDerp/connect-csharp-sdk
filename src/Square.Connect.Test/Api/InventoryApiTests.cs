/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Square.Connect.Client;
using Square.Connect.Api;
using Square.Connect.Model;

namespace Square.Connect.Test
{
    /// <summary>
    ///  Class for testing InventoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InventoryApiTests
    {
        private InventoryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InventoryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InventoryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InventoryApi
            //Assert.IsInstanceOfType(typeof(InventoryApi), instance, "instance is a InventoryApi");
        }

        
        /// <summary>
        /// Test BatchChangeInventory
        /// </summary>
        [Test]
        public void BatchChangeInventoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchChangeInventoryRequest body = null;
            //var response = instance.BatchChangeInventory(body);
            //Assert.IsInstanceOf<BatchChangeInventoryResponse> (response, "response is BatchChangeInventoryResponse");
        }
        
        /// <summary>
        /// Test BatchRetrieveInventoryChanges
        /// </summary>
        [Test]
        public void BatchRetrieveInventoryChangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchRetrieveInventoryChangesRequest body = null;
            //var response = instance.BatchRetrieveInventoryChanges(body);
            //Assert.IsInstanceOf<BatchRetrieveInventoryChangesResponse> (response, "response is BatchRetrieveInventoryChangesResponse");
        }
        
        /// <summary>
        /// Test BatchRetrieveInventoryCounts
        /// </summary>
        [Test]
        public void BatchRetrieveInventoryCountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BatchRetrieveInventoryCountsRequest body = null;
            //var response = instance.BatchRetrieveInventoryCounts(body);
            //Assert.IsInstanceOf<BatchRetrieveInventoryCountsResponse> (response, "response is BatchRetrieveInventoryCountsResponse");
        }
        
        /// <summary>
        /// Test RetrieveInventoryAdjustment
        /// </summary>
        [Test]
        public void RetrieveInventoryAdjustmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adjustmentId = null;
            //var response = instance.RetrieveInventoryAdjustment(adjustmentId);
            //Assert.IsInstanceOf<RetrieveInventoryAdjustmentResponse> (response, "response is RetrieveInventoryAdjustmentResponse");
        }
        
        /// <summary>
        /// Test RetrieveInventoryChanges
        /// </summary>
        [Test]
        public void RetrieveInventoryChangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string catalogObjectId = null;
            //string locationIds = null;
            //string cursor = null;
            //var response = instance.RetrieveInventoryChanges(catalogObjectId, locationIds, cursor);
            //Assert.IsInstanceOf<RetrieveInventoryChangesResponse> (response, "response is RetrieveInventoryChangesResponse");
        }
        
        /// <summary>
        /// Test RetrieveInventoryCount
        /// </summary>
        [Test]
        public void RetrieveInventoryCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string catalogObjectId = null;
            //string locationIds = null;
            //string cursor = null;
            //var response = instance.RetrieveInventoryCount(catalogObjectId, locationIds, cursor);
            //Assert.IsInstanceOf<RetrieveInventoryCountResponse> (response, "response is RetrieveInventoryCountResponse");
        }
        
        /// <summary>
        /// Test RetrieveInventoryPhysicalCount
        /// </summary>
        [Test]
        public void RetrieveInventoryPhysicalCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string physicalCountId = null;
            //var response = instance.RetrieveInventoryPhysicalCount(physicalCountId);
            //Assert.IsInstanceOf<RetrieveInventoryPhysicalCountResponse> (response, "response is RetrieveInventoryPhysicalCountResponse");
        }
        
    }

}
